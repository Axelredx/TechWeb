a) Accessibilità
    Scrivere un form in HTML che rispetti i criteri di accessibilità per ordinare una
    maglietta colorata. Deve contenere i seguenti input:
        • nome e cognome
        • indirizzo e-mail
        • indirizzo di spedizione
        • colore della maglietta (input di tipo color)
        • taglia della maglietta (XS, S, M, L, XL…)
        • un input testuale per eventualmente stampare testo sulla maglietta.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Magliette accessibili</title>
</head>
<body>
    <form method="post">
        <div class="form-example">
            <label for="name">Enter your name: </label>
            <input type="text" name="name" id="name" required />
        </div>
        <div class="form-example">
            <label for="name">Enter your surname: </label>
            <input type="text" name="name" id="name" required />
        </div>
        <div class="form-example">
            <label for="email">Enter your email: </label>
            <input type="email" name="email" id="email" required />
        </div>
        <div class="form-example">
            <label for="name">Enter your name: </label>
            <input type="text" name="name" id="name" required />
        </div>
        <div class "form-example">
            <p>Choose your shirt's colors:</p>
            <div>
                <input type="color" id="head" name="head" value="#e66465" />
                <label for="head">Red</label>
            </div>
            <div>
                <input type="color" id="body" name="body" value="#f6b73c" />
                <label for="body">Yellow</label>
            </div>
        </div>
        <div class="form-example">
            <label for="size">Enter your size: </label>
            <input type="text" name="size" id="size" required />
        </div>
        <div class="form-example">
            <label for="text">Enter your text: </label>
            <input type="text" name="text" id="text" required />
        </div>
        <div class="form-example">
            <input type="submit" value="Send order" />
        </div>
    </form>
</body>
</html>

b) Codifica caratteri
    Quanti byte sono richiesti in UTF-8 per rappresentare le seguenti parole? NB:
    Le parole in Tamil e in Armeno contengono (senza contare gli spazi) 11
    caratteri.
        • Napoletano: bòna jurnàta -> 13 = 9*1+2*2 (ò,à = 2b)
        • Svedese: ha en bra dag -> 10 = 10*1
        • Tamil: -> 33 = 11*3
        • Basco: Egun on -> 6 = 6*1
        • Armeno: -> 22 = 11*2
        • Bielorusso: -> 20 = 10*2

c) CSS
    Scrivere un selettore CSS che seleziona solo gli elementi dispari del secondo
    elemento all’interno del body.

<body>
    <header>
        <h1>Magliette Accessibili</h1>
        <nav>
            <h2>Navbar</h2>
        </nav>
    </header>
    <main>
        <p>Maglietta blu</p>
        <p>Maglietta gialla</p>
        <p>Maglietta nera con scritto "Pippo"</p>
        <p>Maglietta bianca multicolore (finita per sbaglio coi rossi)</p>
        <p>ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn</p>
        <p>Maglietta rossa</p>
    </main>
    <footer>
    </footer>
</body>

--> body > :nth-child(2) p:nth-of-type(odd)

d) Javascript
    Spiegare il concetto di prototipo in JavaScript e come funzionano all’interno
    degli oggetti. Fornire un esempio.

In JavaScript, il concetto di "prototipo" è fondamentale per comprendere come funzionano 
l'ereditarietà e l'estensione degli oggetti. Il prototipo è un meccanismo attraverso il 
quale gli oggetti possono ereditare proprietà e metodi da altri oggetti. Ogni oggetto in 
JavaScript ha un collegamento interno a un altro oggetto chiamato "prototype". Questo 
prototipo può avere a sua volta un prototipo, formando una catena nota come "prototype chain".

function Person(name, age) {
  this.name = name;
  this.age = age;
}
Person.prototype.greet = function() {
  console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
};
function Student(name, age, grade) {
  Person.call(this, name, age); // Chiamare il costruttore di `Person`
  this.grade = grade;
}

// Collegare il prototipo di `Student` a `Person`
Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;

// Aggiungere un nuovo metodo a `Student`
Student.prototype.study = function() {
    console.log(`${this.name} is studying and is in grade ${this.grade}.`);
};

const person1 = new Person('Alice', 30);
person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.
const student1 = new Student('Bob', 20, 'A');
student1.greet(); // Output: Hello, my name is Bob and I am 20 years old.
student1.study(); // Output: Bob is studying and is in grade A.
